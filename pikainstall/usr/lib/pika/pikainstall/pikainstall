#! /bin/python3

# import libs
import argparse
import subprocess
import os

# Version
version="1.1.3"
dist="PikaOS 3"
image="/cdrom/casper/filesystem.squashfs"

# Print Program info
print("pikainstall " + version + ": PikaOS terminal installer! for " + dist + ".")

### text files
_REFIND_SETUP_FILE = """#!/usr/bin/bash
touch /boot/refind_linux.conf
echo '"'Boot with standard options'"'  '"'nvidia-drm.modeset=1 root=UUID={ROOT_PART_UUID} quiet splash ---'"'  > /boot/refind_linux.conf
echo '"'Boot with logging'"'  '"'nvidia-drm.modeset=1 root=UUID={ROOT_PART_UUID} ---'"'  >>  /boot/refind_linux.conf
echo '"'Boot with safe graphics'"'  '"'nvidia-drm.modeset=1 root=UUID={ROOT_PART_UUID} nomodeset ---'"'  >>  /boot/refind_linux.conf
"""

_CRYPTTAB_ROOT_SETUP_FILE = """#!/usr/bin/bash
echo "crypt_root	UUID={ROOT_PART_UUID}	none	luks,discard" > /etc/crypttab
cat /etc/crypttab
"""

_CRYPTTAB_SETUP_FILE = """#!/usr/bin/bash
echo "crypt_home	UUID={HOME_PART_UUID}	/keyfile.txt    	luks" >> /etc/crypttab
cat /etc/crypttab
touch /keyfile.txt
openssl genrsa > /keyfile.txt
echo "{LUKS_PASSWD}" | cryptsetup luksAddKey UUID={HOME_PART_UUID}	/keyfile.txt -
"""

_LANG_SETUP_FILE = """#!/usr/bin/bash
update-locale LANG={LOCALE}
touch /etc/default/keyboard
echo 'XKBMODEL="pc105"' > /etc/default/keyboard
echo 'XKBLAYOUT="{KEYBOARD}"' >> /etc/default/keyboard
echo 'XKBVARIANT=""' >> /etc/default/keyboard
echo 'XKBOPTIONS=""' >> /etc/default/keyboard
echo 'BACKSPACE="guess"' >> /etc/default/keyboard
echo 'KEYMAP={KEYBOARD}' >> /etc/default/keyboard
cp -fv /etc/default/keyboard /etc/vconsole.conf
echo LC_ALL={LOCALE} >> /etc/environment
timedatectl set-timezone {TIMEZONE}
"""

# Global Functions
## List to string
def listToString(s):
    # initialize an empty string
    str1 = ""
    # traverse in the string
    for ele in s:
        str1 += ele
    # return string
    return str1

# Setup Command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-r", "--root", help="The Path where root is mounted to.", metavar="/mnt/root", default=argparse.SUPPRESS, required=True, nargs=1)
parser.add_argument("-l", "--locale", help="Choose what locale/language to use.", metavar="en_US.UTF-8", default=argparse.SUPPRESS, required=True, nargs=1)
parser.add_argument("-k", "--keyboard", help="Choose what keyboard layout to use.", metavar="us", default=argparse.SUPPRESS, required=True, nargs=1)
parser.add_argument("-c", "--cryptkey", help="Luks passkey to /home.", metavar="password123", default=None, nargs=1)
parser.add_argument("-t", "--timezone", help="Choose what timezone to use.", metavar="America/New_York", default=argparse.SUPPRESS, required=True, nargs=1)
args = parser.parse_args()

# Print all command-line arguments.

CHROOT_PATH = listToString(args.root[0])

# Get root info
## Root UUID
root_uuid_command= subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'uuid', CHROOT_PATH], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
root_uuid = root_uuid_command.stdout.readline().decode("utf-8").strip()
## Root Encryption Partition
root_part_encrypt_command = subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'encrypt-part', CHROOT_PATH], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
root_part_encrypt = root_part_encrypt_command.stdout.readline().decode("utf-8").strip()
## Root Encryption UUID
root_uuid_encrypt_command = subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'encrypt-uuid', CHROOT_PATH], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
root_uuid_encrypt = root_uuid_encrypt_command.stdout.readline().decode("utf-8").strip()
## Print Root info
print("\nRoot UUID: {}".format(root_uuid))
if root_part_encrypt == "luks_none":
    print("Root Encryption Partition: Root is not encrypted!")
    print("Root Encryption UUID: Root is not encrypted!")
else:
    print("Root Encryption Partition: {}".format(root_part_encrypt))
    print("Root Encryption UUID: {}".format(root_uuid_encrypt))
# Get Boot info
## Boot UUID
boot_uuid_command= subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'uuid', CHROOT_PATH + "/boot"] , stdout=subprocess.PIPE, stderr=subprocess.PIPE)
## Print Boot
boot_uuid = boot_uuid_command.stdout.readline().decode("utf-8").strip()
print("\nBoot UUID: {}".format(boot_uuid))
# Get EFI info
## EFI UUID
efi_uuid_command= subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'uuid', CHROOT_PATH + "/boot/efi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
efi_uuid = efi_uuid_command.stdout.readline().decode("utf-8").strip()
## Print EFI Info
print("\nEFI UUID: {}".format(efi_uuid))

## Home UUID
home_uuid_command = subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'uuid', CHROOT_PATH + "/home"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
home_uuid = home_uuid_command.stdout.readline().decode("utf-8").strip()

# Get Home info is exists
if root_uuid != home_uuid:
    ## Home Encryption Partition
    home_part_encrypt_command = subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'encrypt-part', CHROOT_PATH + "/home"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    home_part_encrypt = home_part_encrypt_command.stdout.readline().decode("utf-8").strip()
    ## Home Encryption UUID
    home_uuid_encrypt_command = subprocess.Popen(['/usr/lib/pika/pikainstall/partition-helper.sh', 'encrypt-uuid', CHROOT_PATH + "/home"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    home_uuid_encrypt = home_uuid_encrypt_command.stdout.readline().decode("utf-8").strip()
    print("\nHome UUID: {}".format(home_uuid))
    if home_part_encrypt == "luks_none":
        print("Home Encryption Partition: Home is not encrypted!")
        print("Home Encryption UUID: Home is not encrypted!")
    else:
        print("Home Encryption Partition: {}".format(home_part_encrypt))
        print("Home Encryption UUID: {}".format(home_uuid_encrypt))
        if args.cryptkey is not None:
            home_passwd = args.cryptkey
        else:
            ## Ask user for Home luks partition password for the key-filing process
            print("\nPlease enter the LUKS password for the device" + home_part_encrypt + " :")
            home_passwd = input("Warning: Do not enter this incorrectly or late installation will fail! ")


# Checks
# Make sure mountpoints are not /dev prefixes
if CHROOT_PATH.startswith('/dev'):
    print("Error: mountpoint is pointed a device, please use a mountpoint.")
    exit(1)
# Make sure to have all mounts pointing at the same partition
if root_uuid == boot_uuid:
    print("Error: Boot partition not found in chroot.")
    exit(1)
elif root_uuid == efi_uuid:
    print("Error: EFI partition not found in chroot.")
    exit(1)
# Make sure to avoid any mounts pointing at the same partition
elif boot_uuid == efi_uuid:
    print("Error: Boot and EFI are mounted on the same drive, please place each on it's own partition.")
    exit(1)
elif root_uuid != home_uuid:
    if boot_uuid == home_uuid:
        print("Error: Boot and Home are mounted on the same drive, consider removing the -H/--home argument.")
        exit(1)
    elif efi_uuid == home_uuid:
        print("Error: EFI and Home are mounted on the same drive, consider removing the -H/--home argument.")
        exit(1)

# With All Checks Clear and info gathered let's start installing

## extract the squashfs image to root from casper
subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-image.txt'])
squashfs_cmd = ['unsquashfs', '-f', '-d', CHROOT_PATH, image]
subprocess.run(squashfs_cmd)

## Enable bls_boot on boot partiton
subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-flag1.txt'])
boot_flag_cmd = ['/usr/lib/pika/pikainstall/partition-helper.sh', 'flag', CHROOT_PATH, '/boot', 'bls_boot', 'on']
subprocess.run(boot_flag_cmd)

## Enable esp on EFI partiton
subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-flag2.txt'])
efi_flag_cmd = ['/usr/lib/pika/pikainstall/partition-helper.sh', 'flag', CHROOT_PATH, '/boot/efi', 'esp', 'on']
subprocess.run(efi_flag_cmd)

# Write crypttab script if system has encryption
if root_part_encrypt != "luks_none":
    subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-crypt.txt'])
    CRYPTTAB_ROOT_FILE_PATH = '/var/albius-crypttab-root.sh'
    CHROOT_CRYPTTAB_ROOT_FILE_PATH = CHROOT_PATH+CRYPTTAB_ROOT_FILE_PATH
    print("writing to:")
    print(CHROOT_CRYPTTAB_ROOT_FILE_PATH)
    with open(CHROOT_CRYPTTAB_ROOT_FILE_PATH, "w") as file:
        albius_crypttab_root_file = _CRYPTTAB_ROOT_SETUP_FILE.format(
            ROOT_PART_UUID=root_uuid_encrypt,
        )
        file.write(albius_crypttab_root_file)

# Write crypttab script if system has encryption
if root_uuid != home_uuid:
    if home_part_encrypt != "luks_none":
        subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-crypt.txt'])
        CRYPTTAB_FILE_PATH = '/var/albius-crypttab.sh'
        CHROOT_CRYPTTAB_FILE_PATH = CHROOT_PATH+CRYPTTAB_FILE_PATH
        print("writing to:")
        print(CHROOT_CRYPTTAB_FILE_PATH)
        with open(CHROOT_CRYPTTAB_FILE_PATH, "w") as file:
            albius_crypttab_file = _CRYPTTAB_SETUP_FILE.format(
                HOME_PART_UUID=home_uuid_encrypt,
                LUKS_PASSWD=home_passwd,
            )
            file.write(albius_crypttab_file)


# Write lang script
LANG_FILE_PATH = '/var/albius-lang_linux.sh'
CHROOT_LANG_FILE_PATH = CHROOT_PATH+LANG_FILE_PATH
print("writing to:")
print(CHROOT_LANG_FILE_PATH)
with open(CHROOT_LANG_FILE_PATH, "w") as file:
    subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-lang.txt'])
    lang_crypttab_file = _LANG_SETUP_FILE.format(
        LOCALE=listToString(args.locale),
        KEYBOARD=listToString(args.keyboard),
        TIMEZONE=listToString(args.timezone),
    )
    file.write(lang_crypttab_file)

# Write refind script
subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-boot.txt'])
REFIND_FILE_PATH = '/var/albius-refind_linux.sh'
CHROOT_REFIND_FILE_PATH = CHROOT_PATH+REFIND_FILE_PATH
print("writing to:")
print(CHROOT_REFIND_FILE_PATH)
with open(CHROOT_REFIND_FILE_PATH, "w") as file:
    refind_crypttab_file = _REFIND_SETUP_FILE.format(
        ROOT_PART_UUID=root_uuid,
    )
    file.write(refind_crypttab_file)
    

## Run pika-install-script
subprocess.run(['touch', '/tmp/pika-installer-gtk4-status-post.txt'])
bind_dev_cmd = ['/usr/lib/pika/pikainstall/pika-install-host.sh', listToString(CHROOT_PATH)]
subprocess.run(bind_dev_cmd)

print("System installed!")
exit(0)
